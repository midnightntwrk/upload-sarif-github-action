name: Test SARIF Upload Action

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test-file:
        description: 'Test SARIF file to use'
        required: false
        default: 'test-fixtures/sample.sarif'

jobs:
  test-upload:
    runs-on: ubuntu-latest
    name: Test SARIF Upload to Checkmarx
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create test SARIF file
        run: |
          mkdir -p test-fixtures
          cat > test-fixtures/sample.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "test-scanner",
                    "version": "1.0.0",
                    "informationUri": "https://github.com/midnight-ntwrk/upload-sarif-github-action",
                    "rules": [
                      {
                        "id": "TEST001",
                        "name": "TestVulnerability",
                        "shortDescription": {
                          "text": "Test vulnerability for action validation"
                        },
                        "fullDescription": {
                          "text": "This is a test vulnerability to validate the SARIF upload action"
                        },
                        "defaultConfiguration": {
                          "level": "warning"
                        },
                        "helpUri": "https://example.com/TEST001"
                      }
                    ]
                  }
                },
                "results": [
                  {
                    "ruleId": "TEST001",
                    "ruleIndex": 0,
                    "level": "warning",
                    "message": {
                      "text": "Test vulnerability found in sample file"
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/sample.rs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "startColumn": 1,
                            "endLine": 42,
                            "endColumn": 20
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "Created test SARIF file:"
          ls -la test-fixtures/sample.sarif
          echo "File size: $(stat -f%z test-fixtures/sample.sarif 2>/dev/null || stat -c%s test-fixtures/sample.sarif) bytes"
      
      - name: Upload SARIF to Checkmarx
        uses: ./  # Uses the action from the current repository
        with:
          sarif-file: test-fixtures/sample.sarif
          project-name: ${{ github.event.repository.name }}-test
          cx-client-id: ${{ secrets.CX_CLIENT_ID }}
          cx-client-secret: ${{ secrets.CX_CLIENT_SECRET_EU }}
          cx-tenant: ${{ secrets.CX_TENANT }}
      
      - name: Verify upload status
        run: |
          echo "SARIF upload completed successfully"

  test-cargo-audit:
    runs-on: ubuntu-latest
    name: Test with cargo-audit SARIF
    # Only run if we have a Rust project
    if: hashFiles('**/Cargo.toml') != ''
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run cargo audit and generate SARIF
        run: |
          cargo audit --format sarif > cargo-audit.sarif || true
          
          echo "Generated cargo-audit SARIF:"
          ls -la cargo-audit.sarif
          echo "File size: $(stat -f%z cargo-audit.sarif 2>/dev/null || stat -c%s cargo-audit.sarif) bytes"
          echo "First 500 chars of SARIF:"
          head -c 500 cargo-audit.sarif
      
      - name: Upload cargo-audit SARIF to Checkmarx
        uses: ./
        with:
          sarif-file: cargo-audit.sarif
          project-name: ${{ github.event.repository.name }}-rust
          cx-client-id: ${{ secrets.CX_CLIENT_ID }}
          cx-client-secret: ${{ secrets.CX_CLIENT_SECRET_EU }}
          cx-tenant: ${{ secrets.CX_TENANT }}
      
      - name: Upload cargo-audit SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: cargo-audit.sarif

  test-empty-uri-handling:
    runs-on: ubuntu-latest
    name: Test empty URI handling
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create SARIF with problematic entries
        run: |
          mkdir -p test-fixtures
          # Create a SARIF file with empty URIs (which GitHub would reject)
          cat > test-fixtures/problematic.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "problematic-scanner",
                    "version": "1.0.0"
                  }
                },
                "results": [
                  {
                    "ruleId": "PROB001",
                    "message": {
                      "text": "Repository-level issue without file location"
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": ""
                          }
                        }
                      }
                    ]
                  },
                  {
                    "ruleId": "PROB002",
                    "message": {
                      "text": "Valid issue with file location"
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main.rs"
                          },
                          "region": {
                            "startLine": 10
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "Created problematic SARIF file with empty URIs"
      
      - name: Upload problematic SARIF to Checkmarx
        uses: ./
        with:
          sarif-file: test-fixtures/problematic.sarif
          project-name: ${{ github.event.repository.name }}-empty-uri-test
          cx-client-id: ${{ secrets.CX_CLIENT_ID }}
          cx-client-secret: ${{ secrets.CX_CLIENT_SECRET_EU }}
          cx-tenant: ${{ secrets.CX_TENANT }}
        continue-on-error: true  # Don't fail the workflow if this test fails