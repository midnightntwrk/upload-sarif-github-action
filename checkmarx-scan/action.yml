name: 'Checkmarx Full Scan and Upload'
description: 'Performs complete Checkmarx scan with SARIF upload to both GitHub Security and Checkmarx BYOR'
author: 'Midnight'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  project-name:
    description: 'Checkmarx project name'
    required: true
    default: ${{ github.event.repository.name }}
  cx-client-id:
    description: 'Checkmarx OAuth2 client ID'
    required: true
  cx-client-secret:
    description: 'Checkmarx OAuth2 client secret'
    required: true
  cx-tenant:
    description: 'Checkmarx tenant'
    required: true
  base-uri:
    description: 'Checkmarx server URL'
    required: false
    default: 'https://eu-2.ast.checkmarx.net/'
  scs-repo-token:
    description: 'GitHub token for SCS scanning (Supply Chain Security)'
    required: true
  additional-params:
    description: 'Additional parameters for Checkmarx scan'
    required: false
    default: ''
  upload-to-github:
    description: 'Upload SARIF to GitHub Security (automatically disabled for private repos)'
    required: false
    default: 'true'
  upload-to-checkmarx:
    description: 'Upload SARIF to Checkmarx via BYOR'
    required: false
    default: 'true'

outputs:
  scan-id:
    description: 'Checkmarx scan ID'
    value: ${{ steps.checkmarx-scan.outputs.scan-id }}
  sarif-file:
    description: 'Path to generated SARIF file'
    value: 'cx_result.sarif'

runs:
  using: 'composite'
  steps:
    - name: Check Checkmarx EU2 status
      shell: bash
      run: |
        # URL of the EU2 status page
        url="https://eu2-status.ast.checkmarx.net/"
        html=$(curl -s "$url")

        if echo "$html" | grep -q "Operating Normally"; then
          echo "✅ Checkmarx EU2 status: Operating Normally"
        else
          echo "⚠️ Checkmarx EU2 may be experiencing issues"
          echo "Status page: $url"
          echo "Setting SKIP_CHECKMARX flag to skip scan"
          echo "SKIP_CHECKMARX=true" >> $GITHUB_ENV
        fi

    - name: Check Checkmarx IND server health
      shell: bash
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://ind-status.ast.checkmarx.net/)
        if [ "$response" = "200" ]; then
          echo "✅ Checkmarx IND server: Healthy (HTTP 200)"
        else
          echo "⚠️ Checkmarx IND server returned: HTTP $response"
          echo "Setting SKIP_CHECKMARX flag to skip scan"
          echo "SKIP_CHECKMARX=true" >> $GITHUB_ENV
        fi

    - name: Notify if skipping Checkmarx
      if: env.SKIP_CHECKMARX == 'true'
      shell: bash
      run: |
        echo "::warning::Skipping Checkmarx scan due to service unavailability"
        echo "ℹ️ Build will continue without security scanning to avoid blocking development"

    - name: Run Checkmarx scan
      id: checkmarx-scan
      if: env.SKIP_CHECKMARX != 'true'
      uses: checkmarx/ast-github-action@fa338ce82069b297c4852ac77e2d168db9fb56d8 #2.3.21
      with:
        cx_tenant: ${{ inputs.cx-tenant }}
        base_uri: ${{ inputs.base-uri }}
        cx_client_id: ${{ inputs.cx-client-id }}
        cx_client_secret: ${{ inputs.cx-client-secret }}
        additional_params: >
          --scs-repo-url https://github.com/${{ github.repository }}
          --scs-repo-token ${{ inputs.scs-repo-token }}
          --report-format sarif
          ${{ inputs.additional-params }}

    - name: Fix SARIF for GitHub upload
      if: env.SKIP_CHECKMARX != 'true'
      shell: bash
      run: |
        # GitHub fails if artifactLocation.uri is empty
        # Replace empty URIs with a placeholder file
        if [ -f "./cx_result.sarif" ]; then
          mv ./cx_result.sarif ./cx_result.sarif.orig
          jq '.runs |= map(.results |= map(.locations |= map(if .physicalLocation.artifactLocation.uri == "" then .physicalLocation.artifactLocation.uri = "file:/README.md" else . end)))' cx_result.sarif.orig > cx_result.sarif
          echo "Fixed empty artifactLocation URIs in SARIF file"
          
          # Fix missing message text that causes newer codeql-action versions to fail
          mv ./cx_result.sarif ./cx_result.sarif.tmp
          jq '.runs[].results[] |= (if .message.text == null or .message.text == "" then .message.text = ("Security issue detected by " + .ruleId) else . end)' cx_result.sarif.tmp > cx_result.sarif
          rm -f cx_result.sarif.tmp cx_result.sarif.orig
          echo "Fixed missing message text in SARIF file"
        else
          echo "::warning::No SARIF file generated from Checkmarx scan"
        fi

    - name: Upload SARIF to GitHub Security
      if: ${{ env.SKIP_CHECKMARX != 'true' && inputs.upload-to-github == 'true' && github.event.repository.private == false }}
      uses: github/codeql-action/upload-sarif@755f44910c12a3d7ca0d8c6e42c048b3362f7cec  # v3.30.8
      with:
        sarif_file: cx_result.sarif
      continue-on-error: true

    - name: Upload SARIF to Checkmarx BYOR
      if: ${{ env.SKIP_CHECKMARX != 'true' && inputs.upload-to-checkmarx == 'true' && hashFiles('cx_result.sarif') != '' }}
      shell: bash
      run: |
        echo "Uploading SARIF to Checkmarx via BYOR..."
        echo "Project: ${{ inputs.project-name }}"

        # Need to authenticate first (checkmarx-scan doesn't have CLI installed)
        # Install CLI
        CLI_VERSION="2.3.35"
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        case "$ARCH" in
          x86_64) ARCH="x64" ;;
          aarch64|arm64) ARCH="arm64" ;;
        esac

        CLI_URL="https://github.com/Checkmarx/ast-cli/releases/download/${CLI_VERSION}/ast-cli_${CLI_VERSION}_${OS}_${ARCH}.tar.gz"
        curl -L -o cx-cli.tar.gz "$CLI_URL"
        tar -xzf cx-cli.tar.gz
        chmod +x cx

        # Authenticate
        ./cx configure set --prop-name cx_base_uri --prop-value "${{ inputs.base-uri }}"
        ./cx configure set --prop-name cx_client_id --prop-value "${{ inputs.cx-client-id }}"
        ./cx configure set --prop-name cx_client_secret --prop-value "${{ inputs.cx-client-secret }}"
        ./cx configure set --prop-name cx_tenant --prop-value "${{ inputs.cx-tenant }}"

        # Upload
        if ./cx utils import --project-name "${{ inputs.project-name }}" --import-file-path "cx_result.sarif"; then
          echo "✅ SARIF successfully uploaded to Checkmarx"
        else
          echo "::warning::Failed to upload SARIF to Checkmarx BYOR"
        fi

        # Cleanup
        ./cx configure clear || true
        rm -f cx-cli.tar.gz cx LICENSE README.md || true
      continue-on-error: true
